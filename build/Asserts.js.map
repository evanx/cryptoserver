{"version":3,"sources":["../lib/Asserts.js"],"names":[],"mappings":";;;;AACA;;;;;;;;AAEA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,OAAtB,EAA+B;AAC5B,UAAO,OAAO,IAAP,GAAc,QAAQ,QAAR,EAArB;AACF;;AAED;AACG,SADH,kBACU,KADV,EACiB,IADjB,EACuB;AACjB,4BAAO,KAAP,EAAc,IAAd;AACA,aAAO,KAAP;AACF,IAJJ;AAKG,eALH,wBAKgB,KALhB,EAKuB,IALvB,EAK6B;AACvB,4BAAO,KAAP,EAAc,IAAd;AACA,4BAAO,OAAO,KAAP,KAAiB,QAAxB,EAAkC,IAAlC;AACA,aAAO,KAAP;AACF;AATJ,mEAUgB,KAVhB,EAUuB,IAVvB,EAU6B;AACvB,yBAAO,KAAP,EAAc,IAAd;AACA,yBAAO,OAAO,KAAP,KAAiB,QAAxB,EAAkC,IAAlC;AACA,UAAO,KAAP;AACF,CAdJ,qEAeiB,KAfjB,EAewB,IAfxB,EAe8B;AACxB,yBAAO,KAAP,EAAc,IAAd;AACA,yBAAO,SAAS,KAAT,MAAoB,KAA3B,EAAkC,IAAlC;AACA,UAAO,KAAP;AACF,CAnBJ,2EAoBoB,KApBpB,EAoB2B,IApB3B,EAoBiC,GApBjC,EAoBsC;AAChC,OAAI,CAAC,GAAL,EAAU;AACP,YAAM,WAAW,KAAX,CAAiB,IAAjB,EAAuB,GAA7B;AACF;AACD,yBAAO,KAAP,EAAc,EAAC,UAAD,EAAO,YAAP,EAAd;AACA,yBAAO,OAAO,SAAP,CAAiB,KAAjB,CAAP,EAAgC,OAAO,SAAP,EAAkB,EAAC,UAAD,EAAO,YAAP,EAAlB,CAAhC;AACA,yBAAO,SAAS,GAAhB,EAAqB,OAAO,KAAP,EAAc,EAAC,UAAD,EAAO,YAAP,EAAc,QAAd,EAAd,CAArB;AACA,UAAO,KAAP;AACF,CA5BJ,2EA6BoB,KA7BpB,EA6B2B,IA7B3B,EA6BiC,GA7BjC,EA6BsC;AAChC,OAAI,CAAC,GAAL,EAAU;AACP,YAAM,WAAW,KAAX,CAAiB,IAAjB,EAAuB,GAA7B;AACF;AACD,yBAAO,KAAP,EAAc,EAAC,UAAD,EAAO,YAAP,EAAd;AACA,yBAAO,OAAO,SAAP,CAAiB,KAAjB,CAAP,EAAgC,OAAO,SAAP,EAAkB,EAAC,UAAD,EAAO,YAAP,EAAlB,CAAhC;AACA,yBAAO,SAAS,GAAhB,EAAqB,OAAO,KAAP,EAAc,EAAC,UAAD,EAAO,YAAP,EAAc,QAAd,EAAd,CAArB;AACA,UAAO,KAAP;AACF,CArCJ,6EAsCqB,KAtCrB,EAsC4B,IAtC5B,EAsCkC;AAC5B,WAAQ,WAAR,CAAoB,KAApB,EAA2B,IAA3B;AACA,SAAM,OAAN,CAAc,gBAAQ;AACnB,cAAQ,YAAR,CAAqB,IAArB,EAA2B,IAA3B;AACF,IAFD;AAGA,UAAO,KAAP;AACF,CA5CJ,iEA6Ce,KA7Cf,EA6CsB,IA7CtB,EA6C4B;AACtB,yBAAO,KAAP,EAAc,IAAd;AACA,yBAAO,OAAO,OAAP,CAAe,KAAf,CAAP,EAA8B,gBAAgB,IAA9C;AACA,yBAAO,CAAC,OAAO,OAAP,CAAe,KAAf,CAAR,EAA+B,YAAY,IAA3C;AACA,UAAO,KAAP;AACF,CAlDJ","file":"Asserts.js","sourcesContent":["\nimport assert from 'assert';\n\nfunction format(type, options) {\n   return type + ': ' + options.toString();\n}\n\nexports = {\n   assert(value, name) {\n      assert(value, name);\n      return value;\n   },\n   assertString(value, name) {\n      assert(value, name);\n      assert(typeof value === 'string', name);\n      return value;\n   },\n   assertString(value, name) {\n      assert(value, name);\n      assert(typeof value === 'string', name);\n      return value;\n   },\n   assertInteger(value, name) {\n      assert(value, name);\n      assert(parseInt(value) === value, name);\n      return value;\n   },\n   assertIntegerMax(value, name, max) {\n      if (!max) {\n         max = Invariants.props[name].max;\n      }\n      assert(value, {name, value});\n      assert(Number.isInteger(value), format('integer', {name, value}));\n      assert(value <= max, format('max', {name, value, max}));\n      return value;\n   },\n   assertIntegerMin(value, name, min) {\n      if (!min) {\n         min = Invariants.props[name].min;\n      }\n      assert(value, {name, value});\n      assert(Number.isInteger(value), format('integer', {name, value}));\n      assert(value >= min, format('min', {name, value, min}));\n      return value;\n   },\n   assertStringArray(value, name) {\n      Asserts.assertArray(value, name);\n      value.forEach(item => {\n         Asserts.assertString(item, name);\n      });\n      return value;\n   },\n   assertArray(value, name) {\n      assert(value, name);\n      assert(lodash.isArray(value), 'not array: ' + name);\n      assert(!lodash.isEmpty(value), 'empty: ' + name);\n      return value;\n   }\n};\n"]}