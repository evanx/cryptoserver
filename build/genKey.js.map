{"version":3,"sources":["../cryptoserver/genKey.js"],"names":[],"mappings":"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","file":"genKey.js","sourcesContent":["\nconst async = require('async');\nconst bunyan = require('bunyan');\nconst bufferEquals = require('buffer-equal');\n\nconst Common = require('./Common');\nconst Crypto = require('./Crypto');\n\nmodule.exports = function (cryptoserver, keySecrets, done) {\n   const that = {};\n   that.cryptoserver = cryptoserver;\n   that.keyName = keySecrets.keyName;\n   that.redisKey = 'dek:' + keySecrets.keyName;\n   that.secrets = keySecrets.secrets;\n   that.users = Object.keys(keySecrets.secrets).sort();\n   that.users.sort();\n   that.encryptedItems = [];\n\n   const logger = bunyan.createLogger({name: 'cryptoserver.genKey.' + that.keyName, level: 'debug'});\n\n   function save() {\n      const multi = that.cryptoserver.redisClient.multi();\n      multi.hset(that.redisKey, 'iterationCount', Crypto.options.iterationCount);\n      multi.hset(that.redisKey, 'salt', that.salt.toString('base64'));\n      multi.hset(that.redisKey, 'algorithm', Crypto.options.algorithm);\n      multi.hset(that.redisKey, 'iv', that.iv.toString('base64'));\n      logger.info('redis multi exec', that.encryptedItems.length);\n      that.encryptedItems.forEach(function (encryptedItem) {\n         const redisField = 'dek:' + encryptedItem.duo.join(':');\n         multi.hset(that.redisKey, redisField, encryptedItem.encryptedDek.toString('base64'));\n         logger.debug('hset', redisField);\n      });\n      multi.exec(function (err, replies) {\n         if (err) {\n            logger.error('redis multi exec error', err);\n            done(err);\n         } else {\n            logger.info('redis multi exec done', replies.length);\n            done();\n         }\n      });\n   }\n\n   function encryptDuoKek(duo, kek) {\n      const cipher = Crypto.createCipheriv(kek, that.iv);\n      const encryptedDek = Crypto.encryptBuffer(cipher, that.generatedDek);\n      that.encryptedItems.push({\n         duo: duo,\n         encryptedDek: encryptedDek\n      });\n      const decipher = Crypto.createDecipheriv(kek, that.iv);\n      const decryptedDek = Crypto.decryptBuffer(decipher, encryptedDek);\n      logger.debug('decryptedDek', duo, decryptedDek.length, that.generatedDek.length);\n      if (!bufferEquals(decryptedDek, that.generatedDek)) {\n         throw {message: 'encryption verification failed'};\n      }\n      logger.info('verified', duo, Object.keys(that.encryptedItems).length);\n   }\n\n   function encryptDuoTask(duo, clearSecret) {\n      return function (callback) {\n         logger.info('encryptDuoTask', duo);\n         Crypto.pbkdf2(clearSecret, that.salt, function (err, kek) {\n            if (err) {\n               logger.error('pbkdf2 error', duo, err);\n               callback(err);\n            } else {\n               encryptDuoKek(duo, kek);\n               callback();\n            }\n         });\n      };\n   }\n\n   function genKeyUsers() {\n      logger.info('genKeyUsers', that.users, that.salt.length, that.iv.length);\n      const tasks = [];\n      that.users.forEach(function (user0) {\n         that.users.forEach(function (user1) {\n            if (user0 < user1) {\n               const duo = [user0, user1];\n               const clearSecret = that.secrets[user0] + ':' + that.secrets[user1];\n               tasks.push(encryptDuoTask(duo, clearSecret));\n            }\n         });\n      });\n      async.parallel(tasks, function (err) {\n         if (err) {\n            logger.info('genKeyUsers error', err);\n            done(err);\n         } else {\n            save();\n         }\n      });\n   }\n\n   function genKey() {\n      Crypto.randomKey(function (err, generatedDek) {\n         if (err) {\n            logger.info('genKey error', that.users);\n            done(err);\n         } else {\n            that.generatedDek = generatedDek;\n            logger.debug('generatedDek', that.generatedDek.length);\n            genKeyUsers();\n         }\n      });\n   }\n\n   function generate() {\n      async.parallel([\n         function (callback) {\n            Crypto.randomSalt(function (err, salt) {\n               if (err) {\n                  logger.error('salt error', err);\n                  callback(err);\n               } else {\n                  that.salt = salt;\n                  logger.info('salt', salt.length);\n                  callback(null, salt);\n               }\n            })\n         },\n         function (callback) {\n            Crypto.randomIv(function (err, iv) {\n               if (err) {\n                  logger.error('iv error', err);\n                  callback(err);\n               } else {\n                  logger.info('iv', iv.length);\n                  that.iv = iv;\n                  callback(null, iv);\n               }\n            });\n         }\n      ], function (err) {\n         if (err) {\n            done(err);\n         } else {\n            genKey();\n         }\n      });\n   }\n\n   logger.info('genKey', that.users, that.redisKey);\n   try {\n      that.cryptoserver.redisClient.exists(that.redisKey, function (err, exists) {\n         if (err) {\n            logger.error('redis error', err);\n            done(err);\n         } else if (exists) {\n            err = 'already exists';\n            done(err);\n         } else {\n            logger.info('generate', that.redisKey);\n            generate(function (err) {\n               if (err) {\n                  done(err);\n               } else {\n                  save();\n                  done();\n               }\n            });\n         }\n      });\n   } catch (error) {\n      logger.error('genKey', error);\n   }\n};\n"]}