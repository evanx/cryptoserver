{"version":3,"sources":["../cryptoserver/keySecretsStore.js"],"names":[],"mappings":";;AAEA,IAAM,SAAS,QAAQ,QAAR,CAAf;;AAEA,IAAM,SAAS,OAAO,YAAP,CAAoB,EAAC,MAAM,8BAAP,EAApB,CAAf;;AAEA,IAAM,aAAa,EAAnB;;AAEA,SAAS,cAAT,GAA0B;AACvB,OAAM,OAAO;AACV,eAAS,mBAAY;AAClB,gBAAO,KAAP,CAAa,SAAb,EAAwB,KAAK,OAAL,CAAa,oBAArC;AACA,aAAI,KAAK,OAAL,CAAa,oBAAjB,EAAuC;AACpC,mBAAO,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,UAAU,OAAV,EAAmB;AAChD,mBAAM,OAAO,WAAW,OAAX,CAAb;AACA,mBAAI,IAAJ,EAAU;AACP,sBAAM,WAAW,IAAI,IAAJ,GAAW,OAAX,KAAuB,KAAK,SAA7C;AACA,yBAAO,KAAP,CAAa,kBAAb,EAAiC,WAAW,OAA5C,EAAqD,QAArD,EAA+D,KAAK,SAApE;AACA,sBAAI,WAAW,KAAK,OAAL,CAAa,oBAAb,GAAoC,IAAnD,EAAyD;AACtD,4BAAO,IAAP,CAAY,gBAAZ,EAA8B,WAAW,OAAzC,EAAkD,QAAlD;AACA,gCAAW,OAAX,IAAsB,SAAtB;AACF;AACH;AACH,aAVD;AAWF;AACH,OAhBS;AAiBV,YAAM,cAAU,OAAV,EAAmB;AACtB,cAAK,OAAL,GAAe,OAAf;AACF,OAnBS;AAoBV,WAAK,aAAU,IAAV,EAAgB,OAAhB,EAAyB,OAAzB,EAAkC,cAAlC,EAAkD;AACpD,gBAAO,IAAP,CAAY,KAAZ,EAAmB,IAAnB,EAAyB,OAAzB,EAAkC,OAAlC,EAA2C,cAA3C;AACA,oBAAW,OAAX,IAAsB;AACnB,uBAAW,IAAI,IAAJ,GAAW,OAAX,EADQ;AAEnB,kBAAM,IAFa;AAGnB,qBAAS,OAHU;AAInB,qBAAS,OAJU;AAKnB,4BAAgB,cALG;AAMnB,qBAAS;AANU,UAAtB;AAQF,OA9BS;AA+BV,iBAAW,mBAAU,IAAV,EAAgB,OAAhB,EAAyB,MAAzB,EAAiC;AACzC,gBAAO,IAAP,CAAY,WAAZ,EAAyB,IAAzB,EAA+B,OAA/B;AACA,aAAM,OAAO,WAAW,OAAX,CAAb;AACA,aAAI,IAAJ,EAAU;AACP,iBAAK,OAAL,CAAa,IAAb,IAAqB,MAArB;AACF;AACD,gBAAO,IAAP;AACF,OAtCS;AAuCV,WAAK,aAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC3B,gBAAO,IAAP,CAAY,KAAZ,EAAmB,IAAnB,EAAyB,OAAzB;AACA,gBAAO,WAAW,OAAX,CAAP;AACF,OA1CS;AA2CV,aAAO,eAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC7B,gBAAO,IAAP,CAAY,OAAZ,EAAqB,IAArB,EAA2B,OAA3B;AACA,aAAI,WAAW,cAAX,CAA0B,OAA1B,CAAJ,EAAwC;AACrC,uBAAW,OAAX,IAAsB,SAAtB;AACF;AACH;AAhDS,IAAb;AAkDA,UAAO,IAAP;AACF;;AAED,OAAO,OAAP,GAAiB,gBAAjB","file":"keySecretsStore.js","sourcesContent":["\n\nconst bunyan = require('bunyan');\n\nconst logger = bunyan.createLogger({name: \"cryptoserver.keySecretsStore\"});\n\nconst keySecrets = {};\n\nfunction createInstance() {\n   const that = {\n      monitor: function () {\n         logger.debug('monitor', that.options.secretTimeoutSeconds);\n         if (that.options.secretTimeoutSeconds) {\n            Object.keys(keySecrets).forEach(function (keyName) {\n               const item = keySecrets[keyName];\n               if (item) {\n                  const duration = new Date().getTime() - item.timestamp;\n                  logger.debug('monitor duration', keySecrets.keyName, duration, item.timestamp);\n                  if (duration > that.options.secretTimeoutSeconds * 1000) {\n                     logger.info('monitor expire', keySecrets.keyName, duration);\n                     keySecrets[keyName] = undefined;\n                  }\n               }\n            });\n         }\n      },\n      init: function (options) {\n         that.options = options;\n      },\n      put: function (user, keyName, command, custodianCount) {\n         logger.info('put', user, keyName, command, custodianCount);\n         keySecrets[keyName] = {\n            timestamp: new Date().getTime(),\n            user: user,\n            keyName: keyName,\n            command: command,\n            custodianCount: custodianCount,\n            secrets: {}\n         };\n      },\n      setSecret: function (user, keyName, secret) {\n         logger.info('setSecret', user, keyName);\n         const item = keySecrets[keyName];\n         if (item) {\n            item.secrets[user] = secret;\n         }\n         return item;\n      },\n      get: function (user, keyName) {\n         logger.info('get', user, keyName);\n         return keySecrets[keyName];\n      },\n      clear: function (user, keyName) {\n         logger.info('clear', user, keyName);\n         if (keySecrets.hasOwnProperty(keyName)) {\n            keySecrets[keyName] = undefined;\n         }\n      }\n   };\n   return that;\n}\n\nmodule.exports = createInstance();\n"]}