{"version":3,"sources":["../cryptoserver/Crypto.js"],"names":[],"mappings":";;;;;;AACA,IAAM,SAAS,QAAQ,QAAR,CAAf;;AAEA,IAAM,SAAS,QAAQ,UAAR,CAAf;;IAEM,M;YAAA,M;4BAAA,M;;WAEH,O,GAAU;AACP,qBAAY,EADL;AAEP,mBAAU,EAFH;AAGP,yBAAgB,MAHT;AAIP,oBAAW,aAJJ;AAKP,oBAAW;AALJ,O;;;gBAFP,M;;gCAUO,Q,EAAU;AACjB,gBAAO,WAAP,CAAmB,QAAQ,SAA3B,EAAsC,QAAtC;AACF;;;iCAEU,Q,EAAU;AAClB,gBAAO,WAAP,CAAmB,QAAQ,UAA3B,EAAuC,QAAvC;AACF;;;+BAEQ,Q,EAAU;AAChB,gBAAO,WAAP,CAAmB,QAAQ,QAA3B,EAAqC,QAArC;AACF;;;6BAEM,M,EAAQ,I,EAAM,Q,EAAU;AAC5B,gBAAO,MAAP,CAAc,MAAd,EAAsB,IAAtB,EAA4B,QAAQ,cAApC,EAAoD,QAAQ,SAA5D,EACG,OAAO,aAAP,CAAqB,cAArB,EAAqC,QAArC,CADH;AAGF;;;qCAEc,G,EAAK,E,EAAI;AACrB,gBAAO,OAAO,cAAP,CAAsB,QAAQ,SAA9B,EAAyC,GAAzC,EAA8C,EAA9C,CAAP;AACF;;;uCAEgB,G,EAAK,E,EAAI;AACvB,gBAAO,OAAO,gBAAP,CAAwB,QAAQ,SAAhC,EAA2C,GAA3C,EAAgD,EAAhD,CAAP;AACF;;;oCAEa,M,EAAQ,I,EAAM;AACzB,gBAAO,OAAO,MAAP,CAAc,IAAd,EAAoB,MAApB,EAA4B,KAA5B,IAAqC,OAAO,KAAP,CAAa,KAAb,CAA5C;AACF;;;oCAEa,Q,EAAU,S,EAAW;AAChC,gBAAO,SAAS,MAAT,CAAgB,SAAhB,EAA2B,KAA3B,EAAkC,MAAlC,IAA4C,SAAS,KAAT,CAAe,MAAf,CAAnD;AACF;;;oCAEa,M,EAAQ,M,EAAQ;AAC3B,gBAAO,OAAO,MAAP,CAAc,CAAC,OAAO,MAAP,CAAc,MAAd,CAAD,EAAwB,OAAO,KAAP,EAAxB,CAAd,CAAP;AACF;;;oCAEa,Q,EAAU,S,EAAW;AAChC,gBAAO,OAAO,MAAP,CAAc,CAAC,SAAS,MAAT,CAAgB,SAAhB,CAAD,EAA6B,SAAS,KAAT,EAA7B,CAAd,CAAP;AACF;;;UAlDE,M;;;AAsDN,OAAO,OAAP,GAAiB,IAAI,MAAJ,EAAjB","file":"Crypto.js","sourcesContent":["\nconst crypto = require('crypto');\n\nconst Common = require('./Common');\n\nclass Crypto {\n\n   options = {\n      saltLength: 32,\n      ivLength: 16,\n      iterationCount: 100000,\n      algorithm: 'aes-256-ctr',\n      keyLength: 32\n   }\n\n   randomKey(callback) {\n      crypto.randomBytes(options.keyLength, callback);\n   }\n\n   randomSalt(callback) {\n      crypto.randomBytes(options.saltLength, callback);\n   }\n\n   randomIv(callback) {\n      crypto.randomBytes(options.ivLength, callback);\n   }\n\n   pbkdf2(secret, salt, callback) {\n      crypto.pbkdf2(secret, salt, options.iterationCount, options.keyLength,\n         Common.callbackTimer('pbkdf2 timer', callback)\n      );\n   }\n\n   createCipheriv(key, iv) {\n      return crypto.createCipheriv(options.algorithm, key, iv);\n   }\n\n   createDecipheriv(key, iv) {\n      return crypto.createDecipheriv(options.algorithm, key, iv);\n   }\n\n   encryptString(cipher, text) {\n      return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n   }\n\n   decryptString(decipher, encrypted) {\n      return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');\n   }\n\n   encryptBuffer(cipher, buffer) {\n      return Buffer.concat([cipher.update(buffer), cipher.final()]);\n   }\n\n   decryptBuffer(decipher, encrypted) {\n      return Buffer.concat([decipher.update(encrypted), decipher.final()]);\n   }\n}\n\n\nmodule.exports = new Crypto();\n"]}