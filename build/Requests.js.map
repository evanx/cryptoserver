{"version":3,"sources":["../lib/Requests.js"],"names":[],"mappings":"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","file":"Requests.js","sourcesContent":["// Copyright (c) 2015, Evan Summers (twitter.com/evanxsummers)\n// ISC license, see http://github.com/evanx/redexutil/LICENSE\n\n\nimport requestf from 'request';\n\nconst logger = Loggers.create(__filename, 'debug');\n\nfunction statusCode(err, response) {\n   return err || response.statusCode;\n}\n\nfunction createPromise(options) {\n   const startTime = new Date().getTime();\n   return new Promise((resolve, reject) => {\n      requestf(options, (err, response, content) => {\n         let duration = Millis.getElapsedDuration(startTime);\n         if (duration > options.slow) {\n            logger.warn('request slow', options.url, statusCode(err, response), Millis.formatDuration(duration));\n         } else {\n            logger.debug('response', options, statusCode(err, response), Millis.formatDuration(duration));\n         }\n         if (err) {\n            err.options = options;\n            err.duration = duration;\n            reject(err);\n         } else if (response.statusCode === 200) {\n            resolve([response, content]);\n         } else {\n            resolve([response]);\n         }\n      });\n   });\n}\n\nexport async function content(options) {\n   return contentOptions(processOptions(options));\n}\n\nexport function json(options) {\n   return contentOptions(processOptions(options), {json: true});\n}\n\nasync function contentOptions(options) {\n   let [response, content] = await createPromise(options);\n   if (response.statusCode !== 200) {\n      throw {options: options, statusCode: response.statusCode};\n   }\n   return content;\n}\n\nexport async function head(options) {\n   const [response] = await createPromise(options);\n   return response;\n}\n\nfunction processOptions(options, assign) {\n   if (typeof options === 'string') {\n      options = {url: options, slow: 8000};\n   } else if (typeof options === 'object') {\n      assert(options.url, 'url');\n      options.headers = options.headers || {};\n      if (options.lastModified) {\n         Object.assign(options.headers, {'If-Modified-Since': options.lastModified});\n      }\n      if (options.username && options.password) {\n         let auth = 'Basic ' + new Buffer(options.username + ':' + options.password).toString('base64');\n         Object.assign(options.headers, {'Authorization': auth});\n      }\n      if (!options.slow) {\n         options.slow = 8000;\n      }\n   } else {\n      throw {message: 'Invalid request options'};\n   }\n   if (assign) {\n      return Object.assign(options, assign);\n   }\n   return options;\n}\n"]}