{"version":3,"sources":["../lib/ClassPreprocessor.js"],"names":[],"mappings":";;;;;;;;;;8DAQO,iBAAyB,UAAzB,EAAqC,KAArC;AAAA,UAKE,QALF,EAOE,UAPF,EAYE,UAZF,EAaE,KAbF,EAcE,OAdF,EAgBA,cAhBA,EAiBA,UAjBA;AAAA;AAAA;AAAA;AAAA;;AACJ,yBAAO,KAAP,CAAa,WAAb,EAA0B,UAA1B;;AADI,sBAEC,QAAQ,IAAR,CAAa,UAAb,CAFD;AAAA;AAAA;AAAA;;AAAA,wBAGK,kBAAkB,UAHvB;;AAAA;AAKE,0BALF,GAKa,UALb;AAAA;AAAA,yBAME,MAAM,MAAN,CAAa,QAAb,CANF;;AAAA;AAOE,4BAPF,GAOe,WAAW,OAAX,CAAmB,iBAAnB,EAAsC,QAAtC,CAPf;;AAQJ,+BAAa,WAAW,OAAX,CAAmB,IAAnB,EAAyB,OAAO,QAAP,CAAgB,OAAhB,CAAwB,gBAAxB,EAA0C,EAA1C,CAAzB,CAAb;AACA,sBAAI,CAAC,QAAQ,IAAR,CAAa,UAAb,CAAL,EAA+B;AAC5B,kCAAa,aAAa,KAA1B;AACF;AACK,4BAZF,GAYe,aAAG,YAAH,CAAgB,UAAhB,EAA4B,QAA5B,EAZf;AAaE,uBAbF,sBAa0B,MAAM,IAAN,CAAW,GAAX,CAb1B;AAcE,yBAdF;;AAeJ,yBAAO,KAAP,CAAa,OAAb,EAAsB,KAAtB,EAA6B,OAA7B;AACI,gCAhBA,GAgBiB,WAAW,OAAX,CAAmB,IAAI,MAAJ,CAAW,KAAX,EAAkB,GAAlB,CAAnB,EAA2C,OAA3C,CAhBjB;AAiBA,4BAjBA,GAiBa,KAjBb;;AAkBJ,mCAAiB,eAAe,KAAf,CAAqB,IAArB,EAA2B,GAA3B,CAA+B,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC9D,yBAAI,mBAAmB,IAAnB,CAAwB,IAAxB,CAAJ,EAAmC;AAChC,qCAAa,IAAb;AACF,sBAFD,MAEO,IAAI,SAAS,UAAT,IAAuB,aAAa,IAAb,CAAkB,IAAlB,CAA3B,EAAoD;AACxD,+BAAO,4CAAsC,QAAQ,CAA9C,SAAP;AACF;AACD,yBAAM,iBAAiB,KAAK,OAAL,CAAa,cAAb,eAAsC,QAAQ,CAA9C,SAAvB;AACA,4BAAO,MAAP,CAAc,MAAd,EAAsB,KAAtB,EAA6B,cAA7B;AACA,4BAAO,cAAP;AACF,mBATgB,EASd,IATc,CAST,IATS,CAAjB;AAUA,yBAAO,MAAP,CAAc,QAAd,EAAwB,cAAxB;AACA,+BAAG,aAAH,CAAiB,UAAjB,EAA6B,cAA7B;AACA,yBAAO,KAAP,CAAa,YAAb,EAA2B,UAA3B;AA9BI,mDA+BG,UA/BH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I;mBAAe,S;;;;;AAPtB;;;;AACA;;;;AACA;;;;AACA;;IAAY,K;;;;;;AAEZ,IAAM,SAAS,QAAQ,MAAR,CAAe,OAAO,QAAtB,EAAgC,MAAhC,CAAf","file":"ClassPreprocessor.js","sourcesContent":["\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport pathl from 'path';\nimport * as Files from './Files';\n\nconst logger = Loggers.create(module.filename, 'info');\n\nexport async function buildSync(sourceFile, names) { // regex this dereferencing on names\n   logger.debug('buildSync', sourceFile);\n   if (!/^\\.\\//.test(sourceFile)) {\n      throw 'unsupported: ' + sourceFile;\n   }\n   const buildDir = './build/';\n   await Files.mkdirp(buildDir);\n   const targetFile = sourceFile.replace(/^(\\.\\/[a-z]*)\\//, buildDir);\n   sourceFile = sourceFile.replace(/^./, module.filename.replace(/\\/lib\\/\\w*\\.js/, ''));\n   if (!/\\.js$/.test(sourceFile)) {\n      sourceFile = sourceFile + '.js';\n   }\n   const sourceCode = fs.readFileSync(sourceFile).toString();\n   const regex = `([^a-z\\\\.'])(${names.join('|')})([^-A-Za-z:'])`;\n   const replace = `\\$1this.\\$2$3`;\n   logger.debug('regex', regex, replace);\n   let translatedCode = sourceCode.replace(new RegExp(regex, 'g'), replace);\n   let loggerLine = false;\n   translatedCode = translatedCode.split('\\n').map((line, index) => {\n      if (/^\\s+this\\.logger/.test(line)) {\n         loggerLine = true;\n      } else if (false && loggerLine && /\\)\\s+{\\s*$/.test(line)) {\n         return line + `\\nthis.logger.debug('line', ${index + 1});`;\n      }\n      const translatedLine = line.replace(/\\$lineNumber/, `'line:${index + 1}'`);\n      logger.ndebug('line', index, translatedLine);\n      return translatedLine;\n   }).join('\\n');\n   logger.ndebug('source', translatedCode);\n   fs.writeFileSync(targetFile, translatedCode);\n   logger.debug('targetFile', targetFile);\n   return targetFile;\n}\n"]}