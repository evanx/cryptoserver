{"version":3,"sources":["../cryptoserver/loadKey.js"],"names":[],"mappings":"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","file":"loadKey.js","sourcesContent":["\nconst async = require('async');\nconst bunyan = require('bunyan');\n\nconst Common = require('./Common');\nconst Crypto = require('./Crypto');\n\nmodule.exports = function (cryptoserver, keySecrets, done) {\n   const that = {};\n   that.cryptoserver = cryptoserver;\n   that.keyName = keySecrets.keyName;\n   that.redisKey = 'dek:' + keySecrets.keyName;\n   that.secrets = keySecrets.secrets;\n   that.users = Object.keys(keySecrets.secrets);\n   that.users.sort();\n   that.fields = {};\n\n   const logger = bunyan.createLogger({name: 'cryptoserver.loadKey.' + that.keyName});\n\n   function decryptDuo(duo, secret, encryptedDek) {\n      logger.debug('decryptDuo', duo, encryptedDek);\n      Crypto.pbkdf2(secret, that.salt, function (err, kek) {\n         if (err) {\n            logger.error('decryptDuo pbkdf2 error', err);\n            done(err);\n         } else {\n            const decipher = Crypto.createDecipheriv(kek, that.iv);\n            const decryptedDek = Crypto.decryptBuffer(decipher, new Buffer(encryptedDek, 'base64'));\n            logger.info('decryptDuo', duo, kek.length, encryptedDek.length);\n            done(null, decryptedDek);\n         }\n      });\n   }\n\n   function findDuo(hashset) {\n      for (let field in hashset) {\n         if (field.indexOf('dek:') === 0) {\n            const duo = field.split(':').slice(1);\n            if (that.secrets[duo[0]] && that.secrets[duo[1]]) {\n               logger.info('dek', field, that.secrets[duo[0]].length, that.secrets[duo[1]].length);\n               return duo;\n            } else {\n               logger.debug('dek skip', field);\n            }\n         }\n      }\n      throw {message: 'duo not found'};\n   }\n\n   function hgetallReply(hashset) {\n      logger.info('hgetallReply', Object.keys(hashset), hashset.salt.length, hashset.iv.length);\n      that.salt = new Buffer(hashset.salt, 'base64');\n      that.iv = new Buffer(hashset.iv, 'base64');\n      that.duo = findDuo(hashset);\n      const secret = that.secrets[that.duo[0]] + ':' + that.secrets[that.duo[1]];\n      const encryptedDek = hashset['dek:' + that.duo.join(':')];\n      decryptDuo(that.duo, secret, encryptedDek);\n   }\n\n   function hgetall() {\n      that.cryptoserver.redisClient.hgetall(that.redisKey, function (err, reply) {\n         if (err) {\n            logger.error('hgetall error');\n         } else {\n            hgetallReply(reply);\n         }\n      });\n   }\n\n   try {\n      hgetall();\n   } catch (error) {\n      logger.error('loadKey', error);\n   }\n};\n"]}