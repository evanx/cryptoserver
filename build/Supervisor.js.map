{"version":3,"sources":["../lib/Supervisor.js"],"names":[],"mappings":"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","file":"Supervisor.js","sourcesContent":["\nexport default class Supervisor {\n\n   constructor() {\n   }\n\n   async init() {\n      this.logger.info('config.components', Object.keys(this.config.components));\n      for (const componentName in this.config.components) {\n         const componentConfig = this.config.components[componentName];\n         if (componentConfig) {\n            const componentModule = this.config.availableComponents[componentName];\n            assert(componentModule, 'componentModule: ' + componentName);\n            await this.initComponent(componentName, componentModule, componentConfig);\n         } else {\n            this.logger.warn('config.component', componentName);\n         }\n      }\n      await this.startComponents();\n      await this.scheduleComponents();\n      this.logger.info('components', Object.keys(this.components));\n      this.logger.info('inited');\n   }\n\n   async initComponent(componentName, componentModule, componentConfig) { // TODO support external modules\n      assert(lodash.isString(componentName), 'component name');\n      this.logger.info('initComponent', componentName, componentModule, componentConfig);\n      const meta = CsonFiles.readFileSync(`./${componentModule}/${componentModule}.cson`); // TODO support external modules\n      componentConfig = Object.assign(Metas.getDefault(meta.config), componentConfig);\n      componentConfig = Object.assign(componentConfig, Metas.getEnv(meta.config, componentName, process.env));\n      this.logger.debug('config', componentName, meta.config, componentConfig);\n      const errorKeys = Metas.getErrorKeys(meta.config, componentConfig);\n      if (errorKeys.length) {\n         throw new ValidationError('config: ' + errorKeys.join(' '));\n      }\n      const componentState = Object.assign({\n         config: componentConfig,\n         logger: Loggers.create(componentName, componentConfig.loggerLevel || this.config.loggerLevel),\n         supervisor: this,\n         components: this.components\n      }, meta.state);\n      this.componentStates[componentName] = componentState;\n      this.logger.debug('componentModule', componentModule);\n      if (Metas.isSpecType(meta, 'icp')) {\n         componentModule = await ClassPreprocessor.buildSync(componentModule + '.js', Object.keys(componentState));\n      }\n      let componentClass = require('./' + componentModule);\n      if (componentClass.default) {\n         componentClass = componentClass.default;\n      }\n      let component;\n      if (componentClass.start) {\n         component = componentClass;\n         component.config = componentConfig;\n      } else {\n         component = new componentClass();\n         this.logger.info('initComponents state', componentName, Object.keys(componentState));\n         Object.assign(component, {name: componentName}, componentState);\n      }\n      component.name = componentName;\n      this.validateComponent(component);\n      if (component.init) {\n         assert(lodash.isFunction(component.init), 'init function: ' + componentName);\n         await component.init(componentState);\n      }\n      this.initedComponents.push(component);\n      this.components[componentName] = component;\n      this.logger.info('initComponents components', componentName, Object.keys(this.components));\n   }\n\n   validateComponent(component) {\n      assert(component.name, 'component.name');\n      assert(lodash.isFunction(component.start), 'start function: ' + component.name);\n   }\n\n   async startComponents() {\n      this.logger.info('startComponents', this.initedComponents.length);\n      for (const component of [... this.initedComponents]) {\n         if (component.start) {\n            assert(lodash.isFunction(component.start), 'start function: ' + component.name);\n            assert(lodash.isString(component.name), 'name type: ' + typeof component.name);\n            this.logger.debug('start', component.name);\n            await component.start(this.componentStates[component.name]);\n         }\n      }\n   }\n\n   async scheduleComponents() {\n      this.logger.debug('scheduleComponents length', Object.keys(this.components));\n      for (const component of [... this.initedComponents]) {\n         this.logger.debug('scheduleComponents component', component.name, Object.keys(component.config));\n         if (component.config.scheduledTimeout) {\n            this.scheduleComponentTimeout(component);\n         }\n         if (component.config.scheduledInterval) {\n            this.scheduleComponentInterval(component);\n         }\n      }\n   }\n\n   scheduleComponentTimeout(component) {\n      assert(component.config.scheduledTimeout > 0, 'component.config.scheduledTimeout');\n      assert(lodash.isFunction(component.scheduledTimeout), 'scheduledTimeout function: ' + component.name);\n      this.scheduledTimeouts[component.name] = setTimeout(async () => {\n         try {\n            await component.scheduledTimeout();\n         } catch (err) {\n            if (component.config.scheduledTimeoutWarn) {\n               this.logger.warn(err, component.name, component.config);\n            } else {\n               this.error(err, component);\n            }\n         }\n      }, component.config.scheduledTimeout);\n   }\n\n   scheduleComponentInterval(component) {\n      assert(component.config.scheduledInterval > 0, 'component.config.scheduledInterval');\n      assert(lodash.isFunction(component.scheduledInterval), 'scheduledInterval function: ' + component.name);\n      this.scheduledIntervals[component.name] = setInterval(async () => {\n         try {\n            await component.scheduledInterval();\n         } catch (err) {\n            if (component.config.scheduledIntervalWarn) {\n               this.logger.warn(err, component.name, component.config);\n            } else {\n               this.error(err, component);\n            }\n         }\n      }, component.config.scheduledInterval);\n   }\n\n   async start() {\n      this.logger.info('start components', Object.keys(this.components));\n      for (const component of this.components) {\n         await component.start();\n      }\n      this.logger.info('started');\n   }\n\n   async error(err, component) {\n      if (!this.ended) {\n         this.logger.error(err, component.name);\n         if (err.stack) {\n            this.logger.error(err.stack);\n         }\n         if (this.components.metrics) {\n            if (this.components.metrics !== component) {\n               await this.components.metrics.count('error', component.name);\n            }\n         }\n         this.end();\n      } else {\n         this.logger.warn(component.name, err);\n      }\n   }\n\n   async endComponents() {\n      if (this.initedComponents.length) {\n         this.initedComponents.reverse();\n         for (const component of this.initedComponents) {\n            try {\n               await component.end();\n               this.logger.info('end component', component.name);\n            } catch (err) {\n               this.logger.error('end component', component.name, err.stack);\n            }\n         }\n      }\n   }\n\n   async end() {\n      await this.endComponents();\n      if (this.redisClient) {\n         await this.redisClient.quitAsync();\n      }\n      process.exit(0);\n   }\n}\n"]}