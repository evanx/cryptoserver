{"version":3,"sources":["../lib/XSupervisor.js"],"names":[],"mappings":"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","file":"XSupervisor.js","sourcesContent":["\nexport default class Supervisor {\n\n   constructor() {\n   }\n\n   async init() {\n      logger.info('config.components', Object.keys(config.components));\n      for (const componentName in config.components) {\n         const componentConfig = config.components[componentName];\n         if (componentConfig) {\n            const componentModule = config.availableComponents[componentName];\n            assert(componentModule, 'componentModule: ' + componentName);\n            await this.initComponent(componentName, componentModule, componentConfig);\n         } else {\n            logger.warn('config.component', componentName);\n         }\n      }\n      await this.startComponents();\n      await this.scheduleComponents();\n      logger.info('components', Object.keys(components));\n      logger.info('inited');\n   }\n\n   async initComponent(componentName, componentModule, componentConfig) { // TODO support external modules\n      assert(typeof componentName === 'string', 'component name');\n      logger.info('initComponent', componentName, componentModule, componentConfig);\n      const meta = CsonFiles.readFileSync(componentModule + '.cson'); // TODO support external modules\n      componentConfig = Object.assign(Metas.getDefault(meta.config), componentConfig);\n      componentConfig = Object.assign(componentConfig, Metas.getEnv(meta.config, componentName, process.env));\n      logger.debug('config', componentName, meta.config, componentConfig);\n      const errorKeys = Metas.getErrorKeys(meta.config, componentConfig);\n      if (errorKeys.length) {\n         throw new ValidationError('config: ' + errorKeys.join(' '));\n      }\n      const componentState = Object.assign({\n         config: componentConfig,\n         logger: Loggers.create(componentName, componentConfig.loggerLevel || config.loggerLevel),\n         supervisor: this,\n         components: components\n      }, meta.state);\n      componentModule = await ClassPreprocessor.buildSync(componentModule + '.js', Object.keys(componentState));\n      const componentClass = require('./' + componentModule).default; // TODO support external modules\n      const component = new componentClass();\n      logger.info('initComponents state', componentName, Object.keys(componentState));\n      Object.assign(component, {name: componentName}, componentState);\n      if (component.init) {\n         assert(lodash.isFunction(component.init), 'init function: ' + componentName);\n         await component.init();\n      }\n      initedComponents.push(component);\n      components[componentName] = component;\n      logger.info('initComponents components', componentName, Object.keys(components));\n   }\n\n   async startComponents() {\n      logger.info('startComponents', initedComponents.length);\n      for (const component of [... initedComponents]) {\n         if (component.start) {\n            assert(lodash.isFunction(component.start), 'start function: ' + component.name);\n            logger.debug('start', component.name);\n            await component.start();\n         }\n      }\n   }\n\n   async scheduleComponents() {\n      logger.debug('scheduleComponents length', Object.keys(components));\n      for (const component of [... initedComponents]) {\n         logger.debug('scheduleComponents component', component.name, Object.keys(component.config));\n         if (component.config.scheduledTimeout) {\n            this.scheduleComponentTimeout(component);\n         }\n         if (component.config.scheduledInterval) {\n            this.scheduleComponentInterval(component);\n         }\n      }\n   }\n\n   scheduleComponentTimeout(component) {\n      assert(component.config.scheduledTimeout > 0, 'component.config.scheduledTimeout');\n      assert(lodash.isFunction(component.scheduledTimeout), 'scheduledTimeout function: ' + component.name);\n      this.scheduledTimeouts[component.name] = setTimeout(async () => {\n         try {\n            await component.scheduledTimeout();\n         } catch (err) {\n            if (component.config.scheduledTimeoutWarn) {\n               logger.warn(err, component.name, component.config);\n            } else {\n               this.error(err, component);\n            }\n         }\n      }, component.config.scheduledTimeout);\n   }\n\n   scheduleComponentInterval(component) {\n      assert(component.config.scheduledInterval > 0, 'component.config.scheduledInterval');\n      assert(lodash.isFunction(component.scheduledInterval), 'scheduledInterval function: ' + component.name);\n      this.scheduledIntervals[component.name] = setInterval(async () => {\n         try {\n            await component.scheduledInterval();\n         } catch (err) {\n            if (component.config.scheduledIntervalWarn) {\n               logger.warn(err, component.name, component.config);\n            } else {\n               this.error(err, component);\n            }\n         }\n      }, component.config.scheduledInterval);\n   }\n\n   async start() {\n      logger.info('start components', Object.keys(components));\n      for (const component of components) {\n         await component.start();\n      }\n      logger.info('started');\n   }\n\n   async error(err, component) {\n      if (!ended) {\n         logger.error(err, component.name);\n         if (err.stack) {\n            logger.error(err.stack);\n         }\n         if (components.metrics) {\n            if (components.metrics !== component) {\n               await components.metrics.count('error', component.name);\n            }\n         }\n         this.end();\n      } else {\n         logger.warn(component.name, err);\n      }\n   }\n\n   async endComponents() {\n      if (initedComponents.length) {\n         initedComponents.reverse();\n         for (const component of initedComponents) {\n            try {\n               await component.end();\n               logger.info('end component', component.name);\n            } catch (err) {\n               logger.error('end component', component.name, err.stack);\n            }\n         }\n      }\n   }\n\n   async end() {\n      await this.endComponents();\n      if (this.redisClient) {\n         await this.redisClient.quitAsync();\n      }\n      process.exit(0);\n   }\n}\n"]}